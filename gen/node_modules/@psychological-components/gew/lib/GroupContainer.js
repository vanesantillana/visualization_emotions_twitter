import { Group } from "./model/Group";
import { Subject } from "rxjs/Subject";
export class GroupContainer {
    constructor(config) {
        this.groups = [];
        this.groupStatus = [];
        this.config = config;
        this.completeObserver = new Subject();
        this.changeObserver = new Subject();
        this.changeObserver.subscribe(() => {
            if (this.config.maxElements === this.countResults()) {
                this.completeObserver.next(this.groupStatus);
            }
        });
    }
    countResults() {
        return this.groupStatus.filter(g => g).length;
    }
    setResults() {
        this.groupStatus = this.groups.map(group => group.getActiveElementIndex());
        this.changeObserver.next(this.groupStatus);
    }
    clearAll() {
        this.groups.forEach(g => g.disable());
        this.setResults();
    }
    create() {
        for (let i = 1; i <= this.config.getElementsCount(); i++) {
            let g = new Group(this.config, i);
            g.changeObserver.subscribe((group) => {
                if (this.config.maxElements === 1) {
                    this.groups.filter(g => g !== group).forEach(g => g.disable());
                }
                else if (this.countResults() < this.config.maxElements || g.isChanged()) {
                    group.enable();
                }
                else {
                    group.removeTemp();
                }
                this.setResults();
            });
            this.groups.push(g);
        }
    }
    getGroups() {
        return this.groups;
    }
}
